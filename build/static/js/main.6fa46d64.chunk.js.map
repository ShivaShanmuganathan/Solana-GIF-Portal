{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["SystemProgram","web3","arr","Keypair","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","TWITTER_HANDLE","TWITTER_LINK","App","useState","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","checkIfWalletIsConnected","a","window","solana","isPhantom","console","log","connect","onlyIfTrusted","response","publicKey","toString","alert","error","connectWallet","onInputChange","event","value","target","getProvider","connection","Connection","Provider","sendGif","length","provider","program","Program","rpc","addGif","accounts","getGifList","account","fetch","createGifAccount","startStuffOff","user","wallet","systemProgram","programId","signers","useEffect","addEventListener","className","onClick","type","placeholder","onChange","map","item","index","src","gifLink","alt","twitterLogo","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6fa46d64.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.d89d9a86.svg\";","import { useEffect, useState } from 'react';\nimport idl from './idl.json';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport './App.css';\nimport { Connection, PublicKey, clusterApiUrl} from '@solana/web3.js';\nimport {\n  Program, Provider, web3\n} from '@project-serum/anchor';\nimport kp from './keypair.json'\n\n\n// SystemProgram is a reference to the Solana runtime!\nconst { SystemProgram, Keypair } = web3;\n\n// Create a keypair for the account that will hold the GIF data.\nconst arr = Object.values(kp._keypair.secretKey)\nconst secret = new Uint8Array(arr)\nconst baseAccount = web3.Keypair.fromSecretKey(secret)\n\n// Get our program's id form the IDL file.\nconst programID = new PublicKey(idl.metadata.address);\n\n// Set our network to devent.\nconst network = clusterApiUrl('devnet');\n\n// Control's how we want to acknowledge when a trasnaction is \"done\".\nconst opts = {\n  preflightCommitment: \"processed\"\n}\n\n\n// Constants\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\n\n\n\nconst App = () => {\n  // State\n  const TEST_GIFS = [\n    'https://thumbs.gfycat.com/BackThatBernesemountaindog-size_restricted.gif',\n    'https://c.tenor.com/xCqRQgta9CAAAAAd/game-of-thrones-logo.gif',\n    'https://i.pinimg.com/originals/29/d2/ec/29d2ec6bd86b7278b468c7c581790b55.gif',\n    'https://mir-s3-cdn-cf.behance.net/project_modules/max_1200/c50a4a55883023.5996f8afa3f5c.gif',\n    'https://c.tenor.com/jJQ5sk757UgAAAAM/breakingbad-intro.gif',\n    'https://c.tenor.com/dD_xK-rnkyAAAAAC/stranger-things-logo.gif',\n    'https://i.gifer.com/EIgJ.gif'\n  ]\n\n\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [gifList, setGifList] = useState([]);\n\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          \n          console.log('Phantom wallet found!');\n\n          const response = await solana.connect({ onlyIfTrusted: true });\n\n          console.log(\n            'Connected with Public Key:',\n            response.publicKey.toString()\n          );\n          /*\n           * Set the user's publicKey in state to be used later!\n           */\n          setWalletAddress(response.publicKey.toString());\n        }\n\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  /*\n   * Let's define this method so our code doesn't break.\n   * We will write the logic for this next!\n   */\n  const connectWallet = async () => {\n    const { solana } = window;\n  \n    if (solana) {\n      const response = await solana.connect();\n      console.log('Connected with Public Key:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n    console.log(value);\n  };  \n  \n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection, window.solana, opts.preflightCommitment,\n    );\n    return provider;\n  }\n\n  const sendGif = async () => {\n    if (inputValue.length === 0) {\n      console.log(\"No gif link given!\")\n      return\n    }\n    console.log('Gif link:', inputValue);\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n  \n      await program.rpc.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n        },\n      });\n      console.log(\"GIF sucesfully sent to program\", inputValue)\n  \n      await getGifList();\n    } catch (error) {\n      console.log(\"Error sending GIF:\", error)\n    }\n  };\n\n\n  const getGifList = async() => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n      \n      console.log(\"Got the account\", account)\n      setGifList(account.gifList)\n  \n    } catch (error) {\n      console.log(\"Error in getGifs: \", error)\n      setGifList(null);\n    }\n  }\n\n\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log(\"ping\")\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount]\n      });\n      console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString())\n      await getGifList();\n  \n    } catch(error) {\n      console.log(\"Error creating BaseAccount account:\", error)\n    }\n  }\n\n\n  /*\n   * We want to render this UI when the user hasn't connected\n   * their wallet to our app yet.\n   */\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  const renderConnectedContainer = () => {\n    // If we hit this, it means the program account hasn't be initialized.\n    if (gifList === null) {\n      return (\n        <div className=\"connected-container\">\n          <button className=\"cta-button submit-gif-button\" onClick={createGifAccount}>\n            Do One-Time Initialization For GIF Program Account\n          </button>\n        </div>\n      )\n    } \n    // Otherwise, we're good! Account exists. User can submit GIFs.\n    else {\n      return(\n        <div className=\"connected-container\">\n          <input\n            type=\"text\"\n            placeholder=\"Enter gif link!\"\n            value={inputValue}\n            onChange={onInputChange}\n          />\n          <button className=\"cta-button submit-gif-button\" onClick={sendGif}>\n            Submit\n          </button>\n          <div className=\"gif-grid\">\n            {/* We use index as the key instead, also, the src is now item.gifLink */}\n            {gifList.map((item, index) => (\n              <div className=\"gif-item\" key={index}>\n                <img src={item.gifLink} />\n              </div>\n            ))}\n          </div>\n        </div>\n      )\n    }\n  }\n  \n\n  useEffect(() => {\n    window.addEventListener('load', async (event) => {\n      await checkIfWalletIsConnected();\n    });\n  }, []);\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching GIF list...');\n      getGifList()\n\n      // Call Solana program here.\n  \n      // Set state\n      //setGifList(TEST_GIFS);\n    }\n  }, [walletAddress]);\n  \n\n  return (\n    <div className=\"App\">\n      <div className={walletAddress ? 'authed-container' : 'container'}>\n        <div className=\"header-container\">\n          <p className=\"header\">ðŸ–¼ Favorite Series Collection</p>\n          <p className=\"sub-text\">\n            View your Favorite Series Collection in the Metaverse âœ¨\n          </p>\n          {!walletAddress && renderNotConnectedContainer()}\n          {walletAddress && renderConnectedContainer()}\n\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}